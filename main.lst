CCS PCH C Compiler, Version 5.007, 61971               15-Nis-23 11:22

               Filename:   D:\programmerRamoFinallyStarted\PIC_C\ders\disp99\main.lst

               ROM used:   358 bytes (1%)
                           Largest free fragment is 32410
               RAM used:   16 (1%) at main() level
                           22 (1%) worst case
               Stack used: 0 locations
               Stack size: 31

*
0000:  GOTO   002C
.................... #include <main.h> 
.................... #include <18F452.h> 
.................... //////// Standard Header file for the PIC18F452 device //////////////// 
.................... #device PIC18F452 
0004:  MOVF   14,W
0006:  CLRF   01
0008:  SUBWF  13,W
000A:  BC    0012
000C:  MOVFF  13,00
0010:  BRA    002A
0012:  CLRF   00
0014:  MOVLW  08
0016:  MOVWF  15
0018:  RLCF   13,F
001A:  RLCF   00,F
001C:  MOVF   14,W
001E:  SUBWF  00,W
0020:  BTFSC  FD8.0
0022:  MOVWF  00
0024:  RLCF   01,F
0026:  DECFSZ 15,F
0028:  BRA    0018
002A:  RETURN 0
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES WDT128                	//Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4MHz) 
.................... #use STANDARD_IO( C,D ) 
....................  
....................  
.................... int display[10] = {0x3f,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7f,0x6f}; 
.................... int i = 0; 
.................... void main() 
002C:  CLRF   FF8
002E:  BCF    FD0.7
0030:  CLRF   0E
0032:  BSF    FC1.0
0034:  BSF    FC1.1
0036:  BSF    FC1.2
0038:  BCF    FC1.3
003A:  MOVLW  3F
003C:  MOVWF  04
003E:  MOVLW  06
0040:  MOVWF  05
0042:  MOVLW  5B
0044:  MOVWF  06
0046:  MOVLW  4F
0048:  MOVWF  07
004A:  MOVLW  66
004C:  MOVWF  08
004E:  MOVLW  6D
0050:  MOVWF  09
0052:  MOVLW  7D
0054:  MOVWF  0A
0056:  MOVLW  07
0058:  MOVWF  0B
005A:  MOVLW  7F
005C:  MOVWF  0C
005E:  MOVLW  6F
0060:  MOVWF  0D
.................... { 
....................   set_tris_c(0x00); 
0062:  MOVLW  00
0064:  MOVWF  F94
....................   set_tris_a(0xff); 
0066:  MOVLW  FF
0068:  MOVWF  F92
....................   set_tris_d(0x00); 
006A:  MOVLW  00
006C:  MOVWF  F95
....................   output_c(0x00); // onlar basamaðý 
006E:  CLRF   F94
0070:  CLRF   F8B
....................   output_d(0x00); //birler basamaðý 
0072:  CLRF   F95
0074:  CLRF   F8C
....................  
....................   while(TRUE){ 
....................     
....................        
....................      if(input(pin_A0) == 1){ 
0076:  BSF    F92.0
0078:  BTFSS  F80.0
007A:  BRA    00EC
....................       delay_us(200); 
007C:  MOVLW  42
007E:  MOVWF  00
0080:  DECFSZ 00,F
0082:  BRA    0080
0084:  NOP   
....................       i++; 
0086:  INCF   0E,F
....................       if(i == 100){ 
0088:  MOVF   0E,W
008A:  SUBLW  64
008C:  BNZ   0090
....................          i = 0; 
008E:  CLRF   0E
....................       } 
....................        int onlar = i/10; 
....................        int birler = i%10; 
0090:  MOVFF  0E,13
0094:  MOVLW  0A
0096:  MOVWF  14
0098:  RCALL  0004
009A:  MOVFF  01,0F
009E:  MOVFF  0E,13
00A2:  MOVLW  0A
00A4:  MOVWF  14
00A6:  RCALL  0004
00A8:  MOVFF  00,10
....................        output_c(display[onlar]); 
00AC:  CLRF   03
00AE:  MOVF   0F,W
00B0:  ADDLW  04
00B2:  MOVWF  FE9
00B4:  MOVLW  00
00B6:  ADDWFC 03,W
00B8:  MOVWF  FEA
00BA:  MOVFF  FEF,13
00BE:  CLRF   F94
00C0:  MOVFF  13,F8B
....................        output_d(display[birler]); 
00C4:  CLRF   03
00C6:  MOVF   10,W
00C8:  ADDLW  04
00CA:  MOVWF  FE9
00CC:  MOVLW  00
00CE:  ADDWFC 03,W
00D0:  MOVWF  FEA
00D2:  MOVFF  FEF,13
00D6:  CLRF   F95
00D8:  MOVFF  13,F8C
....................       while(input(pin_A0) == 1); 
00DC:  BSF    F92.0
00DE:  BTFSC  F80.0
00E0:  BRA    00DC
....................       delay_us(200); 
00E2:  MOVLW  42
00E4:  MOVWF  00
00E6:  DECFSZ 00,F
00E8:  BRA    00E6
00EA:  NOP   
....................      } 
....................       
....................      if(input(pin_A1) == 1){ 
00EC:  BSF    F92.1
00EE:  BTFSS  F80.1
00F0:  BRA    0162
....................       delay_us(200); 
00F2:  MOVLW  42
00F4:  MOVWF  00
00F6:  DECFSZ 00,F
00F8:  BRA    00F6
00FA:  NOP   
....................       i--; 
00FC:  DECF   0E,F
....................       if(i == 0){ 
00FE:  MOVF   0E,F
0100:  BNZ   0106
....................          i = 99; 
0102:  MOVLW  63
0104:  MOVWF  0E
....................       } 
....................        int onlar = i/10; 
....................        int birler = i%10; 
0106:  MOVFF  0E,13
010A:  MOVLW  0A
010C:  MOVWF  14
010E:  RCALL  0004
0110:  MOVFF  01,11
0114:  MOVFF  0E,13
0118:  MOVLW  0A
011A:  MOVWF  14
011C:  RCALL  0004
011E:  MOVFF  00,12
....................        output_c(display[onlar]); 
0122:  CLRF   03
0124:  MOVF   11,W
0126:  ADDLW  04
0128:  MOVWF  FE9
012A:  MOVLW  00
012C:  ADDWFC 03,W
012E:  MOVWF  FEA
0130:  MOVFF  FEF,13
0134:  CLRF   F94
0136:  MOVFF  13,F8B
....................        output_d(display[birler]); 
013A:  CLRF   03
013C:  MOVF   12,W
013E:  ADDLW  04
0140:  MOVWF  FE9
0142:  MOVLW  00
0144:  ADDWFC 03,W
0146:  MOVWF  FEA
0148:  MOVFF  FEF,13
014C:  CLRF   F95
014E:  MOVFF  13,F8C
....................       while(input(pin_A1) == 1); 
0152:  BSF    F92.1
0154:  BTFSC  F80.1
0156:  BRA    0152
....................       delay_us(200); 
0158:  MOVLW  42
015A:  MOVWF  00
015C:  DECFSZ 00,F
015E:  BRA    015C
0160:  NOP   
....................      } 
0162:  BRA    0076
....................        
....................      
....................   } 
....................    
....................  
.................... } 
0164:  SLEEP 

Configuration Fuses:
   Word  1: 2100   XT NOOSCSEN
   Word  2: 0E0C   PUT NOBROWNOUT BORV20 NOWDT WDT128
   Word  3: 0100   CCP2C1
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
